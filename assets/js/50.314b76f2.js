(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{501:function(s,t,a){"use strict";a.r(t);var r=a(3),e=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"js的-6-种打断点调试方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js的-6-种打断点调试方式"}},[s._v("#")]),s._v(" JS的 6 种打断点调试方式")]),s._v(" "),t("p",[s._v("我们开发中遇到bug，经常需要调试代码，寻找问题所在。 通过"),t("code",[s._v("console.log()")]),s._v(" 打印是我们最常用的方法。")]),s._v(" "),t("p",[s._v("但是有些逻辑比较复杂的代码，单单通过打印log，就得打印很多log，效率也变得慢了起来。")]),s._v(" "),t("p",[s._v("要是能在合适的地方打断点，一步一步运行代码，能帮助我们理清代码逻辑的执行顺序，也能有效的帮忙我们找到bug问题所在。")]),s._v(" "),t("p",[s._v("掌握以下六种断点方式，能大大提高我们寻找bug问题所在的效率。")]),s._v(" "),t("ul",[t("li",[s._v("代码方式\n"),t("ul",[t("li",[s._v("debugger")])])]),s._v(" "),t("li",[s._v("谷歌浏览器设置\n"),t("ul",[t("li",[s._v("点击断点")]),s._v(" "),t("li",[s._v("条件断点")]),s._v(" "),t("li",[s._v("DOM 发生中断的条件\n"),t("ul",[t("li",[s._v("子树修改")]),s._v(" "),t("li",[s._v("属性修改")]),s._v(" "),t("li",[s._v("移除节点")])])]),s._v(" "),t("li",[s._v("XHR/提取断点")]),s._v(" "),t("li",[s._v("事件监听器断点")])])])]),s._v(" "),t("h2",{attrs:{id:"debugger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debugger"}},[s._v("#")]),s._v(" debugger")]),s._v(" "),t("p",[s._v("js代码中写入  "),t("code",[s._v("debugger;")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("debugger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("script"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),t("p",[s._v("在浏览器运行，浏览器就会在debugger处中断了")]),s._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/js/debugger/1.png")}}),s._v(" "),t("h2",{attrs:{id:"点击断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#点击断点"}},[s._v("#")]),s._v(" 点击断点")]),s._v(" "),t("p",[s._v("在浏览器中打开需要调试的代码后，F12 → sources（源代码） → 双击需要调试的文件 → 点击行号打断点，重新刷新页面，页面就会在你点击的行号断点了")]),s._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/js/debugger/2.png")}}),s._v(" "),t("h2",{attrs:{id:"条件断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件断点"}},[s._v("#")]),s._v(" 条件断点")]),s._v(" "),t("p",[s._v("右键单击代码所在的行左侧，会出现一个下拉框，可以添加一个条件断点。")]),s._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/js/debugger/3.png")}}),s._v(" "),t("p",[s._v("输入条件表达式，当运行到这一行代码并且表达式的值为真时就会断住，这比普通断点灵活些。")]),s._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/js/debugger/4.png")}}),s._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/js/debugger/5.png")}}),s._v(" "),t("p",[s._v("注意看，我这里是在 "),t("strong",[s._v("19行")]),s._v(" 输入的条件断点表达式是 "),t("strong",[s._v("b === 2")]),s._v("，因为在当前行设置断点，代码执行结果只有之前的结果，如果你在 "),t("strong",[s._v("18行")]),s._v(" 设置 "),t("strong",[s._v("b === 2")]),s._v("，那时的 b 还是等于 undefined，断点就不会生效")]),s._v(" "),t("h2",{attrs:{id:"dom-发生中断的条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-发生中断的条件"}},[s._v("#")]),s._v(" DOM 发生中断的条件")]),s._v(" "),t("p",[s._v("在 Chrome Devtools 的 Elements(元素) 面板的对应元素上右键，选择 break on（发生中断的条件），可以添加一个 dom 断点，也就是当子树有变动、属性有变动、节点移除这三种情况的时候会断住。可以用来调试导致 dom 变化的代码。")]),s._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/js/debugger/6.png")}}),s._v(" "),t("h2",{attrs:{id:"xhr-提取断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xhr-提取断点"}},[s._v("#")]),s._v(" XHR/提取断点")]),s._v(" "),t("p",[s._v("在 Chrome Devtools 的 Sources（源代码） 面板可以添加 XHR 的 url 断点，当 ajax 请求对应 url 时就会断住，可以用来调试请求相关的代码。")]),s._v(" "),t("h2",{attrs:{id:"事件监听器断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件监听器断点"}},[s._v("#")]),s._v(" 事件监听器断点")]),s._v(" "),t("p",[s._v("在 Chrome Devtools 的 Sources(源代码) 面板还可以添加 Event Listener 的断点，指定当发生什么事件时断住，可以用来调试事件相关代码。")]),s._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/js/debugger/7.png")}}),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("设置断点可以有几种方式，大家可以灵活根据实际场景了断点定位。")]),s._v(" "),t("p",[s._v("经验分享：断点了后，在 Chrome Devtools 的 Sources(源代码) 面板看 脚本的作用域，看每个变量的赋值情况，还可以看调用堆栈，看到达断点位置之前执行了哪些函数。")])])}),[],!1,null,null,null);t.default=e.exports}}]);