(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{572:function(t,a,s){"use strict";s.r(a);var e=s(3),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" git常用命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git status                               查看工作区状态 \ngit add .                                将所有改动放进暂存区\ngit commit -m "描述"                      提交并附带概要信息\ngit pull                                 从远程仓库拉去代码\ngit push                                 推送代码到远程仓库（master分支）\n\ngit log                                  查看日志\ngit log -p                               查看详细历史\ngit log --stat                           查看简要统计\ngit log --oneline --graph \t\t 查看简单历史，显示树\ngit reflog                               查看操作记录\n\ngit branch 名称                          创建分支\ngit checkout 名称                        切换分支\ngit checkout -b 名称                     创建并切换到新分支\ngit checkout --track 名称                创建新分支并关联新分支\ngit branch -d 名称                       删除该分支（不能删除当前所在的分支，不能删除没有合并到master上的分支）\ngit branch -D 名称                       删除该分支（可以删除没有合并到master上的分支）\n\ngit commit --amend                      对最新的一条commit进行修正\ngit reset --hard HEAD^                  丢弃最新提交（未提交的内容会被擦掉）\ngit reset --soft HEAD^                  丢弃最新提交（未提交的内容不会被擦掉）\ngit revert HEAD^                        回到某个commit\ngit rebase 目标基础点                     重新设置基础点\ngit pull --rebase \t\t\t从远程仓库拉去代码并重新设置基础点\ngit merge 分支名称                       将分支合并到当前分支\ngit push origin branchName              将代码推送到远程仓库的指定分支\ngit push -d origin branchName           删除远程分支\n\ngit stash                               暂存代码(直接保存当前修改的文件代码)\ngit stash list                          查看暂存代码列表\ngit stash apply                         命令时可以通过名字指定使用哪个stash，默认使用最近的stash（即stash@{0}）\ngit stash pop                           弹出暂存代码（出栈，删除list的这行记录）\ngit stash drop                          删除指定的stash记录\n')])])]),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("p",[t._v("请到官网 "),a("a",{attrs:{href:"http://git-scm.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-scm.com"),a("OutboundLink")],1),t._v(" 或国内的下载站，下载安装包。")]),t._v(" "),a("h2",{attrs:{id:"创建项目有两种情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建项目有两种情况"}},[t._v("#")]),t._v(" 创建项目有两种情况")]),t._v(" "),a("h4",{attrs:{id:"本地无项目-克隆远程库的文件到本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地无项目-克隆远程库的文件到本地"}},[t._v("#")]),t._v(" "),a("code",[t._v("本地无项目")]),t._v("，克隆远程库的文件到本地")]),t._v(" "),a("p",[t._v("例如在github或gitee上已有的项目，可以将其拉取到本地上")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone  https://github.com/347830076/myBlog.git  my-projName\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" my-projName\n")])])]),a("p",[t._v("注意：上面的git clone命令需要传入第一个参数是远端git库的地址，第二个参数是本地的项目名字（也就是本地的文件夹名称）")]),t._v(" "),a("h4",{attrs:{id:"本地有项目-合并远程库的文件到本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地有项目-合并远程库的文件到本地"}},[t._v("#")]),t._v(" "),a("code",[t._v("本地有项目")]),t._v("，合并远程库的文件到本地")]),t._v(" "),a("p",[t._v("例如我本地开发好一个程序应用，并且在github或gitee上创建好一个空的库，需要把代码上传到该库")]),t._v(" "),a("p",[t._v("首先,你需要执行下面两条命令,作为git的基础配置,作用是告诉git你是谁,你输入的信息将出现在你创建的提交中.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你的名字或昵称"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你的邮箱"')]),t._v("\n")])])]),a("ol",[a("li",[t._v("那我们第一步可以初始化本地库先")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("// 进入到本地程序所在根目录\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\t\t\t\t// git的初始化\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("给该本地库添加远程库地址")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repo-address"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t//把远程库的地址填入到"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repo-address"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("把本地文件和远程库文件进行合并")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("添加文件到暂存区")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\t\t\t           // 添加本地队列\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"第一次提交"')]),t._v("\t\t    // 把队列中的文件提交到本地暂存区\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("合并后提交代码")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\t\t\t//把本地库的文件推送到远程库的master主线\n")])])]),a("p",[t._v("如果需要账号密码的话就输入账号密码，这样就完成了一次提交。")]),t._v(" "),a("h2",{attrs:{id:"提交时老是提示输入用户名密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交时老是提示输入用户名密码"}},[t._v("#")]),t._v(" 提交时老是提示输入用户名密码")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global credential.helper store\n")])])]),a("p",[t._v("执行完后，下次提交再次输入账号密码，即可以自动存储了")]),t._v(" "),a("h2",{attrs:{id:"查看git库的当前状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看git库的当前状态"}},[t._v("#")]),t._v(" 查看git库的当前状态")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])])]),a("h2",{attrs:{id:"撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),a("h4",{attrs:{id:"未使用-git-add-缓存代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未使用-git-add-缓存代码"}},[t._v("#")]),t._v(" 未使用 git add 缓存代码")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout filename // 撤销某个文件，注意“--”左右空格\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\t// 撤销所有文件\n")])])]),a("p",[t._v("ps: 此命令不会删除掉刚新建的文件")]),t._v(" "),a("h4",{attrs:{id:"已经使用了-git-add-缓存了代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已经使用了-git-add-缓存了代码"}},[t._v("#")]),t._v(" 已经使用了 git add 缓存了代码")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD filename\t//放弃某个文件的缓存\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\t//放弃所有的缓存\n")])])]),a("h4",{attrs:{id:"已经用-git-commit-提交了代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已经用-git-commit-提交了代码"}},[t._v("#")]),t._v(" 已经用 git commit 提交了代码")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset  HEAD^ \t\t// 与git reset --mixed HEAD^ 效果是一样的, 不删除工作空间改动代码，撤销commit，并且撤销git "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" 操作\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset  HEAD^      \t        // 退到上一次commit的状态\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset  HEAD~2\t        // 退到上上一次commit的状态， 数字以此类推，往上撤回\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset  HEAD\t                // 退到当前commit的状态\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset  commit\t        // 回退到任意版本\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --mixed HEAD^ \t// 退到上一次commit的状态，将上次commit的改动显示到工作空间\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123987")]),t._v("                // 回退到指定的commit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n")])])]),a("h5",{attrs:{id:"参数的意思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数的意思"}},[t._v("#")]),t._v(" 参数的意思")]),t._v(" "),a("ul",[a("li",[t._v("--mixed")])]),t._v(" "),a("p",[t._v("意思是：不删除工作空间改动代码，"),a("code",[t._v("撤销commit")]),t._v("，"),a("code",[t._v("并且撤销git add .")]),t._v(" 操作")]),t._v(" "),a("p",[t._v("这个为默认参数,"),a("code",[t._v("git reset --mixed HEAD^")]),t._v("和"),a("code",[t._v("git reset HEAD^")]),t._v(" 效果是一样的。")]),t._v(" "),a("ul",[a("li",[t._v("--soft")])]),t._v(" "),a("p",[t._v("不删除工作空间改动代码，撤销commit，不撤销git add .")]),t._v(" "),a("ul",[a("li",[t._v("--hard")])]),t._v(" "),a("p",[t._v("删除工作空间改动代码，撤销commit，撤销git add .")]),t._v(" "),a("p",[t._v("注意完成这个操作后，就恢复到了上一次的commit状态。")]),t._v(" "),a("h4",{attrs:{id:"如果commit注释写错了-只是想改一下注释-只需要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果commit注释写错了-只是想改一下注释-只需要"}},[t._v("#")]),t._v(" 如果commit注释写错了，只是想改一下注释，只需要：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git commit --amend\n")])])]),a("p",[t._v("此时会进入默认vim编辑器，修改注释完毕后保存就好了。")]),t._v(" "),a("h3",{attrs:{id:"创建新分支的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建新分支的命令"}},[t._v("#")]),t._v(" 创建新分支的命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在本地创建新分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一次提交到远程分支，需要跟远程分支关联起来")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行过上一条命令后，以后在新分支就可以直接通过 `git push` 提交代码了")]),t._v("\n")])])]),a("h3",{attrs:{id:"拉取线上所有分支下来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取线上所有分支下来"}},[t._v("#")]),t._v(" 拉取线上所有分支下来")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git fetch // 会拉取远程所有内容，包括分支，此时本地直接切换分支即可，不用新建分支\n")])])]),a("h3",{attrs:{id:"查看本地分支和追踪情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看本地分支和追踪情况"}},[t._v("#")]),t._v(" 查看本地分支和追踪情况")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote show origin\t//可对比查看远程哪些分支删除了，然后根据提醒，删除远程已删除的所有关联本地的分支，再使用git branch -D 删除具体的分支\n")])])]),a("h2",{attrs:{id:"gitignore规则不生效的解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore规则不生效的解决办法"}},[t._v("#")]),t._v(" .gitignore规则不生效的解决办法")]),t._v(" "),a("p",[t._v("把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rm -r --cached .\ngit add .\ngit commit -m '更新.gitignore'\ngit pull\ngit push\n")])])]),a("p",[t._v("这样就可以了！")]),t._v(" "),a("h2",{attrs:{id:"设置全局-gitignore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置全局-gitignore"}},[t._v("#")]),t._v(" 设置全局 .gitignore")]),t._v(" "),a("ol",[a("li",[t._v("vim ~/.gitignore_global")]),t._v(" "),a("li",[t._v("写入内容")]),t._v(" "),a("li",[t._v("生效配置文件")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global core.excludesfile ~/.gitignore_global\n")])])]),a("h2",{attrs:{id:"如果git远程地址更改了-怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果git远程地址更改了-怎么办"}},[t._v("#")]),t._v(" 如果git远程地址更改了，怎么办")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote remove origin "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("旧的git地址"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  // 删除原来的git地址\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("新的git地址"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     // 换成新的git地址\n")])])]),a("p",[t._v("这样，当你的git地址变了，但又不想重新克隆，用它吧")]),t._v(" "),a("h2",{attrs:{id:"常见错误和解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见错误和解决方法"}},[t._v("#")]),t._v(" 常见错误和解决方法")]),t._v(" "),a("h3",{attrs:{id:"win10用户提交代码一直提示fatal-authentication-failed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#win10用户提交代码一直提示fatal-authentication-failed"}},[t._v("#")]),t._v(" win10用户提交代码一直提示fatal: Authentication failed")]),t._v(" "),a("p",[a("strong",[t._v("排除掉用户的设置正确之后，依然不行")])]),t._v(" "),a("p",[t._v("后来发现这是一个win10的系统，原来有如下操作：")]),t._v(" "),a("p",[t._v("Win10 的用户凭据里保存了git的本地用户信息，找到它，删掉就好了!")]),t._v(" "),a("p",[t._v("具体的：\n"),a("code",[t._v("控制面板")]),t._v("> "),a("code",[t._v("用户帐户")]),t._v(" > "),a("code",[t._v("管理你的凭据")]),t._v(" > "),a("code",[t._v("选择 [Windows 凭据]")])]),t._v(" "),a("p",[t._v("git 保存的用户信息在[普通凭据]列表里")]),t._v(" "),a("p",[t._v("操作完成后，正常git操作就好")]),t._v(" "),a("h3",{attrs:{id:"ssl-certificate-problem-unable-to-get-local-issuer-certificate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssl-certificate-problem-unable-to-get-local-issuer-certificate"}},[t._v("#")]),t._v(" SSL certificate problem: Unable to get local issuer certificate")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global http.sslVerify false\n")])])]),a("p",[t._v("参考文章 "),a("a",{attrs:{href:"https://confluence.atlassian.com/bitbucketserverkb/ssl-certificate-problem-unable-to-get-local-issuer-certificate-816521128.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://confluence.atlassian.com/bitbucketserverkb/ssl-certificate-problem-unable-to-get-local-issuer-certificate-816521128.html"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"git-pull-失败-提示-fatal-refusing-to-merge-unrelated-histories"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-失败-提示-fatal-refusing-to-merge-unrelated-histories"}},[t._v("#")]),t._v(" git pull 失败 ,提示：fatal: refusing to merge unrelated histories")]),t._v(" "),a("p",[t._v("在进行git pull 时，添加一个可选项")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master --allow-unrelated-histories\n")])])]),a("h3",{attrs:{id:"git-pull-失败"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-失败"}},[t._v("#")]),t._v(" git pull 失败")]),t._v(" "),a("p",[t._v("提示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("    error: inflate: data stream error (incorrect header check)\n    error: unable to unpack 6723035d09cf144d37204910229f202a9c45abbe header\n    fatal: loose object 6723035d09cf144d37204910229f202a9c45abbe (stored in .git/objects/67/23035d09cf144d37204910229f202a9c45abbe) is corrupt\n    fatal: the remote end hung up unexpectedly\n")])])]),a("p",[t._v("解决： win+鼠标左键，点击.git/objects/67/23035d09cf144d37204910229f202a9c45abbe，在vscode打开这个文件，直接删除这个文件就可以了，在重新git pull就可以")]),t._v(" "),a("h3",{attrs:{id:"fatal-multiple-stage-entries-for-merged-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fatal-multiple-stage-entries-for-merged-file"}},[t._v("#")]),t._v(" fatal:multiple stage entries for merged file")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('解决办法如下：\n1.执行rm .git/index，回车\n2.执行git add -A，回车\n3.git commit -m "您的修改说明" \n')])])]),a("h3",{attrs:{id:"fatal-unable-to-access-https-github-com-xxx-tcp-connection-reset-by-peer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fatal-unable-to-access-https-github-com-xxx-tcp-connection-reset-by-peer"}},[t._v("#")]),t._v(" fatal: unable to access 'https://github.com/xxx': TCP connection reset by peer")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git gc\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);