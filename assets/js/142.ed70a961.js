(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{595:function(s,t,a){"use strict";a.r(t);var r=a(3),n=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"变量声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[s._v("#")]),s._v(" 变量声明")]),s._v(" "),t("p",[s._v("变量使用前必须先声明，我们可以使用 var 来声明变量。")]),s._v(" "),t("p",[s._v("当然我们也可以用 let  const ，不过typescript已经帮我们做了变量判断，就是你使用var 定义两个相同的变量，会报错提示你已经定义过了。")]),s._v(" "),t("p",[s._v("所以这里使用var 也是没啥问题的。习惯使用es6语法的同学，直接写let const也是好的。")]),s._v(" "),t("p",[s._v("下面我们使用四种方式来声明变量：")]),s._v(" "),t("h4",{attrs:{id:"_1、声明变量的类型及初始值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、声明变量的类型及初始值"}},[s._v("#")]),s._v(" 1、声明变量的类型及初始值：")]),s._v(" "),t("p",[s._v("var [变量名] : [类型] = 值;")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" uname"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aliwang"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("注意：变量不要使用 "),t("code",[s._v("name")]),s._v(" 否则会与 DOM 中的全局 "),t("code",[s._v("window 对象下的 name")]),s._v(" 属性出现了重名。")]),s._v(" "),t("h4",{attrs:{id:"_2、声明变量的类型-但没有初始值-变量值会设置为-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、声明变量的类型-但没有初始值-变量值会设置为-undefined"}},[s._v("#")]),s._v(" 2、声明变量的类型，但没有初始值，变量值会设置为 undefined：")]),s._v(" "),t("p",[s._v("var [变量名] : [类型];")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" uname"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h4",{attrs:{id:"_3、声明变量并初始值-但不设置类型-该变量可以是任意类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、声明变量并初始值-但不设置类型-该变量可以是任意类型"}},[s._v("#")]),s._v(" 3、声明变量并初始值，但不设置类型，该变量可以是任意类型：")]),s._v(" "),t("p",[s._v("var [变量名] = 值;")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" uname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aliwang"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h4",{attrs:{id:"_4、声明变量没有设置类型和初始值-类型可以是任意类型-默认初始值为-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、声明变量没有设置类型和初始值-类型可以是任意类型-默认初始值为-undefined"}},[s._v("#")]),s._v(" 4、声明变量没有设置类型和初始值，类型可以是任意类型，默认初始值为 undefined：")]),s._v(" "),t("p",[s._v("变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：")]),s._v(" "),t("p",[s._v("var [变量名];")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" something"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsomething "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'seven'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsomething "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nsomething"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Tom'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里ts编译不会报错，执行js会报错，就是原生js语法问题了")]),s._v("\n")])])]),t("h4",{attrs:{id:"typescript-遵循强类型-如果将不同的类型赋值给变量会编译错误-如下实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-遵循强类型-如果将不同的类型赋值给变量会编译错误-如下实例"}},[s._v("#")]),s._v(" TypeScript 遵循强类型，如果将不同的类型赋值给变量会编译错误，如下实例：")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个代码会编译错误")]),s._v("\n")])])]),t("h2",{attrs:{id:"类型断言-type-assertion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型断言-type-assertion"}},[s._v("#")]),s._v(" 类型断言（Type Assertion）")]),s._v(" "),t("p",[s._v("类型断言可以用来手动改变一个值的类型，即"),t("code",[s._v("允许变量从一种类型更改为另一种类型")]),s._v("。")]),s._v(" "),t("p",[s._v("语法格式： "),t("code",[s._v("<类型>值")]),s._v("  或  "),t("code",[s._v("值 as 类型")])]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" str   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//str、str2 是 string 类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("TypeScript 是怎么确定单个断言是否足够\n当 S 类型是 T 类型的子集，或者 T 类型是 S 类型的子集时，S 能被成功断言成 T。这是为了在进行类型断言时提供额外的安全性，完全毫无根据的断言是危险的，如果你想这么做，你可以使用 any。")]),s._v(" "),t("p",[s._v("它之所以不被称为类型转换，是因为转换通常意味着某种运行时的支持。但是，类型断言纯粹是一个编译时语法，同时，它也是一种为编译器提供关于如何分析代码的方法。")]),s._v(" "),t("p",[s._v("编译后，以上代码会生成如下 JavaScript 代码：")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//str、str2 是 string 类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);