(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{474:function(n,t,e){"use strict";e.r(t);var s=e(3),i=Object(s.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[[t("div",{staticClass:"_base-count-down no-rtl"},[t("div",{staticClass:"content"},[n._t("default",null,null,{d:n.days,h:n.hours,m:n.mins,s:n.seconds,hh:("00"+n.hours).slice(-2),mm:("00"+n.mins).slice(-2),ss:("00"+n.seconds).slice(-2)})],2)])],n._v(" "),t("script",[n._v("\n/* eslint-disable object-curly-newline */\n<p>export default {\ndata: () =&gt; ({\ndays: '0',\nhours: '00',\nmins: '00',\nseconds: '00',\ntimer: null,\ncurTime: 0\n}),\nprops: {\ntime: {\ntype: [Number, String],\ndefault: 0\n},\nrefreshCounter: {\ntype: [Number, String],\ndefault: 0\n},\nend: {\ntype: [Number, String],\ndefault: 0\n},\nisMiniSecond: {\ntype: Boolean,\ndefault: false\n}\n},\ncomputed: {\nduration() {\nif (this.end) {\nlet end = String(this.end).length &gt;= 13 ? +this.end : +this.end * 1000;\nend -= Date.now();\nreturn end;\n}\nconst time = this.isMiniSecond ? Math.round(+this.time / 1000) : Math.round(+this.time);\nreturn time;\n}\n},\nmounted() {\nthis.countDown();\n},\nwatch: {\nduration() {\nthis.countDown();\n},\nrefreshCounter() {\nthis.countDown();\n}\n},\nmethods: {\ndurationFormatter(time) {\nif (!time) return { ss: 0 };\nlet t = time;\nconst ss = t % 60;\nt = (t - ss) / 60;\nif (t &lt; 1) return { ss };\nconst mm = t % 60;\nt = (t - mm) / 60;\nif (t &lt; 1) return { mm, ss };\nconst hh = t % 24;\nt = (t - hh) / 24;\nif (t &lt; 1) return { hh, mm, ss };\nconst dd = t;\nreturn { dd, hh, mm, ss };\n},\ncountDown() {\n// eslint-disable-next-line no-unused-expressions\nthis.curTime = Date.now();\nthis.getTime(this.duration);\n},\ngetTime(time) {\n// eslint-disable-next-line no-unused-expressions\nthis.timer &amp;&amp; clearTimeout(this.timer);\nif (time &lt; 0) {\nreturn;\n}\n// eslint-disable-next-line object-curly-newline\nconst { dd, hh, mm, ss } = this.durationFormatter(time);\nthis.days = dd || 0;\n// this.hours = <code>00${hh || ''}</code>.slice(-2);\n// this.mins = <code>00${mm || ''}</code>.slice(-2);\n// this.seconds = <code>00${ss || ''}</code>.slice(-2);\nthis.hours = hh || 0;\nthis.mins = mm || 0;\nthis.seconds = ss || 0;\nthis.timer = setTimeout(() =&gt; {\nconst now = Date.now();\nconst diffTime = Math.floor((now - this.curTime) / 1000);\nconst step = diffTime &gt; 1 ? diffTime : 1; // 页面退到后台的时候不会计时，对比时间差，大于1s的重置倒计时\nthis.curTime = now;\nthis.getTime(time - step);\n}, 1000);\n}\n}\n};\n")]),n._v(" "),t("style",{attrs:{lang:"scss",scoped:""}},[n._v("\n@import '~@assets/css/common.scss';</p>\n<p>._base-count-down {\ncolor: #fff;\ntext-align: left;\nposition: relative;\n.content {\nwidth: auto;\ndisplay: flex;\nalign-items: center;\n}\nspan {\ndisplay: inline-block;\n}\n.section {\nposition: relative;\n}\n}\n")]),t("p")],2)}),[],!1,null,null,null);t.default=i.exports}}]);