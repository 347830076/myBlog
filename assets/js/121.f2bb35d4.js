(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{573:function(t,s,a){"use strict";a.r(s);var e=a(3),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"gitlab-ci"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci"}},[t._v("#")]),t._v(" gitlab-ci")]),t._v(" "),s("h2",{attrs:{id:"macos-安装gitlab-runner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#macos-安装gitlab-runner"}},[t._v("#")]),t._v(" macOS 安装gitlab-runner")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('sudo curl --output /usr/local/bin/gitlab-runner "https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64"\n')])])]),s("p",[t._v("安装后授权"),s("code",[t._v("gitlab-runner")]),t._v("这个文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo chmod +x /usr/local/bin/gitlab-runner\n")])])]),s("p",[t._v("网站的证书可以使用火狐浏览器来下载，点击域名左边的小锁，  安全连接 -> 更多信息 -> 查看证书")]),t._v(" "),s("p",[t._v("最后点击 "),s("code",[t._v("下载PEM（证书）")])]),t._v(" "),s("p",[t._v("下载的证书改pem后缀名为 crt")]),t._v(" "),s("p",[t._v("或者用命令生成")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cat comliq-net.pem >> ca.crt\n")])])]),s("p",[t._v("到放证书的文件打开终端，执行下面命令，"),s("code",[t._v("注册runner")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("gitlab-runner register --tls-ca-file ca.crt\n")])])]),s("p",[s("strong",[t._v("安装提示输入 url ,  token,  描述， tag， 选择shell")])]),t._v(" "),s("p",[s("code",[t._v("url, token")]),t._v(" 的信息，在自己的gitlab网站上，项目的 "),s("code",[t._v("setting -> CI/CD -> runner (Expand) -> 左边信息栏中")])]),t._v(" "),s("p",[t._v("Register the runner with this URL:")]),t._v(" "),s("p",[t._v("And this registration token:")]),t._v(" "),s("p",[t._v("注册完之后呢，项目的setting -> CI/CD -> runner (Expand) -> 左边信息栏 下面会出现一个 "),s("code",[t._v("Available specific runners")]),t._v(" 标题，下面都是你注册的runner")]),t._v(" "),s("p",[t._v("然后执行 "),s("code",[t._v("gitlab-runner start")]),t._v(" "),s("code",[t._v("gitlab-runner run")])]),t._v(" "),s("p",[t._v("如果出现你注册的 runner 左边有感叹号，就执行 "),s("code",[t._v("gitlab-runner verify")]),t._v(" "),s("code",[t._v("gitlab-runner stop")]),t._v(" "),s("code",[t._v("gitlab-runner start")]),t._v(" "),s("code",[t._v("gitlab-runner run")]),t._v("，先验证看看有没有失败的， 停止掉，重新开启，最后再run跑起来")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/tool/gitlab-ci/gitlab-ci.png")}}),t._v(" "),s("p",[s("code",[t._v("gitlab-runner register")]),t._v(" 注册跑步在")]),t._v(" "),s("p",[s("code",[t._v("gitlab-runner status")]),t._v(" 检查状态")]),t._v(" "),s("p",[s("code",[t._v("gitlab-runner start")]),t._v(" 开始")]),t._v(" "),s("p",[s("code",[t._v("gitlab-runner stop")]),t._v(" 停止")]),t._v(" "),s("p",[s("code",[t._v("gitlab-runner run")]),t._v(" 运行")]),t._v(" "),s("p",[s("code",[t._v("gitlab-runner verify")]),t._v(" 验证")]),t._v(" "),s("p",[s("code",[t._v("gitlab-runner list")]),t._v("    列出所有跑步者")]),t._v(" "),s("p",[t._v("取消注册跑步者，下面三种方法都可以")]),t._v(" "),s("ol",[s("li",[t._v("gitlab-runner unregister --url http://git-xxx.com --token TOKEN_NAME")]),t._v(" "),s("li",[t._v("gitlab-runner unregister --name NAME")]),t._v(" "),s("li",[t._v("从config.toml文件中删除跑步者并启动跑步者")])]),t._v(" "),s("p",[t._v("在项目当中，新建个 "),s("code",[t._v(".gitlab-ci.yml")]),t._v(" 文件，")]),t._v(" "),s("p",[t._v("里面代码如下：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("image: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\nservices:\n  - docker:dind\nstages:\n  - deploy\n\nstep-deploy-prod:\n  stage: deploy\n  script:\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("logout")]),t._v(" xxx \n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" login --username"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx --password"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx xxx.xxx.com\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#- docker images")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#- docker ps")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#- if [ true ]; then echo "this is true"; fi')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#- if [ $(docker images -q vueappcontainer) ]; then docker rmi -f vueappcontainer;fi")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t vueappcontainer:v1.0.0 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images -q vueappcontainer:v1.0.0"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" xxx/xxx/vueapp:v1.0.0\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push xxx/xxx/vueapp:v1.0.0\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里是查看当前的服务器上有没有正在运行或者存在我们之前运行过的项目容器，如果有删除了")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - if [ $(docker ps -aq --filter name=vueapp) ]; then docker rm -f vueapp;fi")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - docker run -d -p 8002:80 --rm  --name vueapp vueapp")]),t._v("\n  tags: \n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在哪个runner上面执行，在注册runner可以自定义")]),t._v("\n  when: on_success\n")])])]),s("p",[t._v("上面代码是使用了"),s("code",[t._v("docker 注册，登录")]),t._v("，然后通过项目的"),s("code",[t._v("Dockerfile")]),t._v("文件生成一个镜像，最后"),s("code",[t._v("push")]),t._v("提交到自己的"),s("code",[t._v("镜像仓库地址")])]),t._v(" "),s("h3",{attrs:{id:"gitlab-ci-yml-常用配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-yml-常用配置"}},[t._v("#")]),t._v(" .gitlab-ci.yml 常用配置：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("配置")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("image")]),t._v(" "),s("td",[t._v("镜像")])]),t._v(" "),s("tr",[s("td",[t._v("jobs")]),t._v(" "),s("td",[t._v("如上所示：install-job、build-job 便是 jobs，是 .gitlab-ci.yml 最基本的元素。")])]),t._v(" "),s("tr",[s("td",[t._v("stages")]),t._v(" "),s("td",[t._v("用来组合 jobs 按步骤工作，jobs 下面对应的 stage 和 stages 的子集对应。")])]),t._v(" "),s("tr",[s("td",[t._v("only")]),t._v(" "),s("td",[t._v("指定 jobs 的执行场景，相对应的是 except。")])]),t._v(" "),s("tr",[s("td",[t._v("script")]),t._v(" "),s("td",[t._v("执行命令")])])])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("when")])]),t._v(" 可以设置以下值：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("on_success")]),t._v(" - 只有前面stages的所有工作成功时才执行。 这是默认值。")]),t._v(" "),s("li",[s("code",[t._v("on_failure")]),t._v(" - 当前面stages中任意一个jobs失败后执行。")]),t._v(" "),s("li",[s("code",[t._v("always")]),t._v(" - 无论前面stages中jobs状态如何都执行。")]),t._v(" "),s("li",[s("code",[t._v("manual")]),t._v(" - 手动执行(GitLab8.10增加)。")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("only and except")])]),t._v(" 两个参数说明了job什么时候将会被创建:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("only")]),t._v("定义了"),s("code",[t._v("job")]),t._v("需要执行的所在分支或者标签")]),t._v(" "),s("li",[s("code",[t._v("except")]),t._v("定义了"),s("code",[t._v("job")]),t._v("不会执行的所在分支或者标签")]),t._v(" "),s("li",[t._v("以下是这两个参数的几条用法规则：\n"),s("ul",[s("li",[s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("如果都存在在一个"),s("code",[t._v("job")]),t._v("声明中，则所需引用将会被"),s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("所定义的分支过滤.")]),t._v(" "),s("li",[s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("允许使用正则")]),t._v(" "),s("li",[s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("可同时使用。如果"),s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("在一个"),s("code",[t._v("job")]),t._v("配置中同时存在，则以"),s("code",[t._v("only")]),t._v("为准，跳过"),s("code",[t._v("except")]),t._v("(从下面示例中得出)。")]),t._v(" "),s("li",[s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("允许使用特殊的关键字："),s("code",[t._v("branches")]),t._v("，"),s("code",[t._v("tags")]),t._v("和"),s("code",[t._v("triggers")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("only")]),t._v("和"),s("code",[t._v("except")]),t._v("允许使用指定仓库地址但不是"),s("code",[t._v("forks")]),t._v("的仓库(查看示例3)。")])])])]),t._v(" "),s("p",[t._v("例子")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("stages:\n  - deploy\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 变量参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $REFRESH_NPM  \t\t\t是否刷新 npm 依赖包，默认不刷新，值为 TRUE 时刷新")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $TAG_NAME \t\t\t    容器标签名，生产环境更新时，必须人为填写")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $CI_COMMIT_BRANCH \tgit 分支名：dev，qa，qa2，qa3，prod")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $DOCKER_USERNAME  \t阿里云镜像容器账号")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $DOCKER_PASSWORD \t  阿里云镜像容器密码")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行发布命令")]),t._v("\nstep-deploy:\n  stage: deploy\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用的 gitlab runner")]),t._v("\n  tags:\n    - projectName\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 监听以下分支变化，自动更新对应环境")]),t._v("\n  only:\n    - dev\n    - qa\n    - qa2\n    - prod\n\n  variables:\n    TAG_NAME: "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),t._v("\n\n  script:\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印所有参数")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$REFRESH_NPM")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CI_COMMIT_BRANCH")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$TAG_NAME")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多行条件判断：https://www.cnblogs.com/sanduzxcvbnm/p/14962298.html")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果分支为生产环境，则不能使用默认 tag，必须人为输入")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CI_COMMIT_BRANCH")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prod"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$TAG_NAME")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 docker file 打包镜像")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t shendu-"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CI_COMMIT_BRANCH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$TAG_NAME")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("  --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PROJECT_ENV")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${CI_COMMIT_BRANCH}")]),t._v('"')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重命名镜像")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images -q shendu-$CI_COMMIT_BRANCH:$TAG_NAME"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" registry.cn-xxx.aliyuncs.com/namespace/web-"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CI_COMMIT_BRANCH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$TAG_NAME")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 登出 阿里云镜像仓库")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("logout")]),t._v(" registry.cn-xxx.aliyuncs.com\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 登录 docker 阿里云镜像仓库")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" login --username"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DOCKER_USERNAME")]),t._v(" --password"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DOCKER_PASSWORD")]),t._v('"')]),t._v(" registry.cn-xxx.aliyuncs.com\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推送镜像到仓库")]),t._v("\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push registry.cn-xxx.aliyuncs.com/namespace/web-"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CI_COMMIT_BRANCH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$TAG_NAME")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);